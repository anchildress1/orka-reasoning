name: Tests

on:
  push:
    branches: [main, master, develop, feat/*]
    paths:
      - "orka/**"
      - "test/**"
      - "requirements*.txt"
      - "pyproject.toml"
      - ".github/workflows/tests.yml"
  pull_request:
    branches: [main, master, develop]
    paths:
      - "orka/**"
      - "test/**"
      - "requirements*.txt"
      - "pyproject.toml"
      - ".github/workflows/tests.yml"

env:
  PYTHONPATH: .
  SKIP_LLM_TESTS: true
  PYTEST_RUNNING: true
  CI: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install redis
        brew services start redis

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use Redis from chocolatey for Windows testing
        choco install redis-64 --version 3.0.503
        redis-server --service-install
        redis-server --service-start

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
        
    - name: Install optional dependencies
      run: |
        # Install optional dependencies for better coverage
        pip install sentence-transformers || true
        pip install openai || true
        
    - name: Wait for Redis (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'
        
    - name: Wait for Redis (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Start-Sleep -Seconds 5
        # Test Redis connection
        redis-cli ping || echo "Redis not available, tests will use fake Redis"

    - name: Run unit tests
      run: |
        pytest test/unit/ -v --cov=orka --cov-report=xml --cov-report=term-missing --maxfail=5 -x

    - name: Run integration tests
      run: |
        pytest test/integration/ -v --cov=orka --cov-append --cov-report=xml --cov-report=term-missing --maxfail=3

    - name: Run performance tests (quick)
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        pytest test/performance/ -v --maxfail=1 -k "not slow" || echo "Performance tests skipped - no tests found"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage.xml
          pytest-results.xml
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -r requirements.txt

    - name: Run Black
      run: black --check --diff orka/ test/

    - name: Run isort
      run: isort --check-only --diff orka/ test/

    - name: Run flake8
      run: flake8 orka/ test/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run mypy
      run: mypy orka/ --ignore-missing-imports --no-strict-optional

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit security check
      run: bandit -r orka/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  test-matrix-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "Some tests failed"
          exit 1
        elif [[ "${{ needs.test.result }}" == "cancelled" ]]; then
          echo "Tests were cancelled"
          exit 1
        else
          echo "All tests passed"
        fi

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Deployment readiness check
      run: |
        echo "All checks passed - ready for deployment"
        echo "Coverage reports uploaded to Codecov"
        echo "Security scans completed"
        echo "Code quality checks passed"
